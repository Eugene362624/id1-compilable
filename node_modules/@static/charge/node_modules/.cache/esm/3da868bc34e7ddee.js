let readFileSync,pathDirname,pathJoin,babelTraverse,babelParse;_34e‍.x([["default",()=>_34e‍.o]]);_34e‍.w("fs",[["readFileSync",["readFileSync"],function(v){readFileSync=v}]]);_34e‍.w("path",[["dirname",["pathDirname"],function(v){pathDirname=v}],["join",["pathJoin"],function(v){pathJoin=v}]]);_34e‍.w("@babel/traverse",[["default",["babelTraverse"],function(v){babelTraverse=v}]]);_34e‍.w("@babel/parser",[["parse",["babelParse"],function(v){babelParse=v}]]);




const _34e‍anonymous=(modulePath) => {
  let code = readFileSync(modulePath).toString()

  let ast = babelParse(code, {
    sourceType: "module",
    plugins: ["jsx"],
  })

  let importedModulePaths = []

  let visitor = {
    ImportDeclaration(path) {
      let node = path.node
      let moduleName = node.source && node.source.value ? node.source.value : null

      if (moduleName.startsWith(".")) {
        let modulePathRelativeToSourceDirectory = pathJoin(pathDirname(modulePath), moduleName)

        if (!modulePathRelativeToSourceDirectory.includes(".")) {
          modulePathRelativeToSourceDirectory = `${modulePathRelativeToSourceDirectory}.js`
        }

        importedModulePaths.push(modulePathRelativeToSourceDirectory)
      }
    },
  }

  babelTraverse(ast, visitor)

  return importedModulePaths
};_34e‍.d(_34e‍anonymous);
