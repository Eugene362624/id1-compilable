let TextFile,mdxImportParser,mdxBuilder;_34e‍.x([["default",()=>_34e‍.o]]);_34e‍.w("../text-file",[["default",["TextFile"],function(v){TextFile=v}]]);_34e‍.w("../import-parsers/mdx",[["default",["mdxImportParser"],function(v){mdxImportParser=v}]]);_34e‍.w("../builders/mdx",[["default",["mdxBuilder"],function(v){mdxBuilder=v}]]);



class MDXFile extends TextFile {
  get importedDependencyPaths() {
    return mdxImportParser(this.path)
  }

  get outputPath() {
    let extension = super.extensions.slice(-1)[0]
    return super.outputPath.replace(`.${extension}`, "")
  }

  async build(props) {
    let built = await mdxBuilder(this.path, props)

    return {
      ...built,
      output: `<!DOCTYPE html>\n\n${built.output}`,
    }
  }

  get isComponent() {
    return true
  }
}

TextFile.registerFileType({
  extension: ".html.mdx",
  klass: MDXFile,
})

_34e‍.d(MDXFile);
