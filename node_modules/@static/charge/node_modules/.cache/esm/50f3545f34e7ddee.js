let readFileSync,pathDirname,pathJoin,postcssParse,valueParser;_34e‍.x([["default",()=>_34e‍.o]]);_34e‍.w("fs",[["readFileSync",["readFileSync"],function(v){readFileSync=v}]]);_34e‍.w("path",[["dirname",["pathDirname"],function(v){pathDirname=v}],["join",["pathJoin"],function(v){pathJoin=v}]]);_34e‍.w("postcss/lib/parse",[["default",["postcssParse"],function(v){postcssParse=v}]]);_34e‍.w("postcss-value-parser",[["default",["valueParser"],function(v){valueParser=v}]]);




const _34e‍anonymous=(stylesheetPath) => {
  let css = readFileSync(stylesheetPath).toString()
  let ast = postcssParse(css)

  return ast.nodes.reduce((importedStylesheetPaths, node) => {
    if (node.type === "atrule" && node.name === "import") {
      let importedStylesheetPath = valueParser(node.params).nodes[0].value

      if (importedStylesheetPath.startsWith(".")) {
        let importedStylesheetPathRelativeToSourceDirectory = pathJoin(
          pathDirname(stylesheetPath),
          importedStylesheetPath,
        )
        importedStylesheetPaths.push(importedStylesheetPathRelativeToSourceDirectory)
      }
    }

    return importedStylesheetPaths
  }, [])
};_34e‍.d(_34e‍anonymous);
